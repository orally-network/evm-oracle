// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.20;

import "forge-std/Test.sol";

import {OrallyVerifierOracle} from "../OrallyVerifierOracle.sol";
import {OrallyStructs} from "../../OrallyStructs.sol";

import {console2} from "@forge-std/console2.sol";

contract OrallyVerifierOracleTest is Test {
    // random deployer address for testing
    address constant deployer = 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38;

    // Sybil permissionless wallet (staging)
    address constant stagingReporter = 0xBFD54D868BE89184f19f597489A9FA9385AA708e;

    /*
    source (staging): https://tysiw-qaaaa-aaaak-qcikq-cai.icp0.io/get_xrc_data_with_proof?id=BTC/ETH&api_key={api_key}(&bytes=true)
    decoded data: {
      "data": {
        "symbol": "BTC/ETH",
        "rate": 17879640968,
        "decimals": 9,
        "timestamp": 1716995580
      },
      "meta": {
        "id": "BTC/ETH",
        "timestamp": 1716995654,
        "fee": "0",
        "fee_symbol": "ETH"
      },
      "signature": "112ccc60953cf218d66a8acd39acc2af2a0a03d08da5383e40f0d8257fc7b969614d35ced101671bddaee79b7d67b5c2a5322b5aa19a23acc1f9207724ff8c701b"
    }
    */
    bytes constant priceFeedData = hex"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000429b5ab88000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000665745fc00000000000000000000000000000000000000000000000000000000000000074254432f4554480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000066574646000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074254432f455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041112ccc60953cf218d66a8acd39acc2af2a0a03d08da5383e40f0d8257fc7b969614d35ced101671bddaee79b7d67b5c2a5322b5aa19a23acc1f9207724ff8c701b00000000000000000000000000000000000000000000000000000000000000";

    /*
    (without API key to pay fee on-chain during updating)
    source (staging): https://tysiw-qaaaa-aaaak-qcikq-cai.icp0.io/get_xrc_data_with_proof?id=DOGE/SHIB(&bytes=true)
    decoded data: {
      "data": {
        "symbol": "DOGE/SHIB",
        "rate": 6045147689985,
        "decimals": 9,
        "timestamp": 1716995700
      },
      "meta": {
        "id": "DOGE/SHIB",
        "timestamp": 1715864053,
        "fee": "59688801444990"
      },
      "signature": "99033014ecc11304f4e98bcfe0b7e056b67c497218cb2412b0f8c710c698dc6e51d5462057824826d9d2d8c0f2ed64297c26cda850833bac9b5ef6bbbccfab641c"
    }
    */
    bytes constant priceFeedDataWithFee = hex"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000057f7ee17401000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000665746740000000000000000000000000000000000000000000000000000000000000009444f47452f53484942000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000665746b10000000000000000000000000000000000000000000000000000364961cea47e0000000000000000000000000000000000000000000000000000000000000009444f47452f53484942000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000416a2318f13a4e80d06c8058b0386508711ef325b2cbe701f342fd7c2f8b75d2db64c256c63376482e42eedfb8822f0eee2d07cdb3a547d88ea7e225092e358e1c1b00000000000000000000000000000000000000000000000000000000000000";

    /*
    source (staging): https://tysiw-qaaaa-aaaak-qcikq-cai.icp0.io/get_feed_data_with_proof?id=custom_BTC/USD_NUMBER&api_key={api_key}(&bytes=true)
    decoded data: {
      "data": {
        "CustomNumber": {
          "id": "custom_BTC/USD_NUMBER",
          "value": 68331610000,
          "decimals": 6
        }
      },
      "meta": {
        "id": "custom_BTC/USD_NUMBER",
        "timestamp": 1717082781,
        "fee": "0",
        "fee_symbol": "ETH"
      },
      "signature": "de40822a3139453ffc581acef83ef712674a7ea7d8f49b1da65c8bae8489b34862b840d09a6d75492234e651148462441d7298d5669a5f03d040fc78a5964a381b"
    }
    */
    bytes constant customNumberData = hex"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000fe8e19f9000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000015637573746f6d5f4254432f5553445f4e554d424552000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000066589a9d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015637573746f6d5f4254432f5553445f4e554d42455200000000000000000000000000000000000000000000000000000000000000000000000000000000000041de40822a3139453ffc581acef83ef712674a7ea7d8f49b1da65c8bae8489b34862b840d09a6d75492234e651148462441d7298d5669a5f03d040fc78a5964a381b00000000000000000000000000000000000000000000000000000000000000";

    /*
    source (staging): https://tysiw-qaaaa-aaaak-qcikq-cai.icp0.io/get_asset_data_with_proof?id=custom_get_logs_example(&bytes=true)
    decoded data: {
      "data": {
        "CustomString": {
          "id": "custom_get_logs_example",
          "value": "ETH/USD"
        }
      },
      "meta": {
        "id": "custom_get_logs_example",
        "timestamp": 1717083073,
        "fee": "123",
        "fee_symbol": "ETH"
      },
      "signature": "2844745982ffab821892c6bfe84894688292676269bd55b8cd58cdc99307601e6ad24eff8b3d75b8ce6b0bd30d7fe3809db33a825d13d42bd3fcb30ddf991fe11c"
    }
    */
    bytes constant customStringDataWithFee = hex"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000017637573746f6d5f6765745f6c6f67735f6578616d706c6500000000000000000000000000000000000000000000000000000000000000000000000000000000074554482f5553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000066589bc10000000000000000000000000000000000000000000000000000368812401de60000000000000000000000000000000000000000000000000000000000000017637573746f6d5f6765745f6c6f67735f6578616d706c650000000000000000000000000000000000000000000000000000000000000000000000000000000041fb603a0e174a863c0bfd214056fa5616b0dff6aef6dc8141eb5613bc85c20a250399de53be3ecebc9c044fe97a0330a5d7977ba80f782af37beff8555fdf1cd81c00000000000000000000000000000000000000000000000000000000000000";

    /*
    source (staging): https://tysiw-qaaaa-aaaak-qcikq-cai.icp0.io/read_contract_with_proof?chain_id=42161&function_signature="function balanceOf(address account) external view returns (uint256)"&contract_addr=0xA533f744B179F2431f5395978e391107DC76e103&method=balanceOf&params=(0x654DFF41D51c230FA400205A633101C5C1f1969C)&api_key={api_key}(&bytes=true)
    {
      "data": [
        {
          "Uint": "16515555520224476981328"
        }
      ],
      "meta": {
        "chain_id": 42161,
        "contract_address": "0xA533f744B179F2431f5395978e391107DC76e103",
        "method": "balanceOf",
        "params": "(0x654DFF41D51c230FA400205A633101C5C1f1969C)",
        "block_number": 0,
        "timestamp": 1717083165,
        "fee": "0",
        "fee_symbol": "ETH"
      },
      "signature": "46a5c34ad0c7ddf82c82e6b525075d76ed1c889b94a1af8b60c8e8944a208d363cd89d04e30fb6f78d9826773f2ad86c27e23fbaf1ac9a7d06f1a482c820a0f21c"
    }
    */
    bytes constant readArbitrumTokenBalanceData = hex"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000037f4f60027b15aae85000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000a4b1000000000000000000000000a533f744b179f2431f5395978e391107dc76e10300000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000066589c1d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000962616c616e63654f660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c28307836353444464634314435316332333046413430303230354136333331303143354331663139363943290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004146a5c34ad0c7ddf82c82e6b525075d76ed1c889b94a1af8b60c8e8944a208d363cd89d04e30fb6f78d9826773f2ad86c27e23fbaf1ac9a7d06f1a482c820a0f21c00000000000000000000000000000000000000000000000000000000000000";

    /*
    source (staging): https://tysiw-qaaaa-aaaak-qcikq-cai.icp0.io/read_logs?chain_id=42161&block_from=204767825&block_to=204767827&topics0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&addresses=0xa533f744b179f2431f5395978e391107dc76e103&api_key={api_key}(&bytes=true)
    {
      "data": [
        {
          "address": "0xa533f744b179f2431f5395978e391107dc76e103",
          "topics": [
            "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
            "0x0000000000000000000000003166c6d2313fbcf1a40545c55662861f3320f343",
            "0x000000000000000000000000c08ffbba8c5f42beb7e6dd29142cc61855a3076b"
          ],
          "data": [...],
          "block_hash": "0x8c429bb034cc9ecf168cf988bb28c6afeef40cf33fa197f3cfcdcf1fe7548212",
          "block_number": 204767826,
          "transaction_hash": "0x2793384567fb135228beaf2fa6c9e88ab21f3ff928d1f7cdb495ed49e5112ac6",
          "transaction_index": 2,
          "log_index": "4",
          "transaction_log_index": "",
          "log_type": "",
          "removed": false
        }
      ],
      "meta": {
        "chain_id": 42161,
        "block_from": 204767825,
        "block_to": 204767827,
        "topics0": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        ],
        "topics1": [

        ],
        "topics2": [

        ],
        "topics3": [

        ],
        "addresses": [
          "0xa533f744b179f2431f5395978e391107dc76e103"
        ],
        "timestamp": 1717083324,
        "fee": "0",
        "fee_symbol": "ETH"
      },
      "signature": "363f4b791ca30f1a6e4a5cabbc598ddd8db5c4ad9eb9577f1fe6007a8153ed4c5ca55e58b28732b9a814d24a36175456f1da4145ec228ffd947b90282263d4831c"
    }
    */
    bytes constant arbitrumTransferLogData = hex"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000009a000000000000000000000000000000000000000000000000000000000000005e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000c348252000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000054000000000000000000000000000000000000000000000000000000000000005600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a307861353333663734346231373966323433316635333935393738653339313130376463373665313033000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000eb83cf33da7a913bfa4b1000000000000000000000000000000000000000000000000000000000c348251000000000000000000000000000000000000000000000000000000000c348253000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000066589cbca307861353333663734346231373966323433316635333935393738653339313130376463373665313033000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041d4ff6a0f6b7911298790753975562dd341df65c8a87b81527c64f189ed0e314c45ae0b468f63ab47d1a9a024a620a5ec5c847059c3a0ed71b830bdeda70f175c1b00000000000000000000000000000000000000000000000000000000000000";

    OrallyVerifierOracle orally;
    // test privateKey
    uint256 reporterKey = 0xa11ce;
    address reporter;

    function setUp() public {
        reporter = vm.addr(reporterKey);

        console2.log("Reporter address: {}", reporter);

        vm.startPrank(deployer);
        orally = new OrallyVerifierOracle();
        orally.initialize(msg.sender);
        orally.addReporter(reporter);
        orally.addReporter(stagingReporter);
    }

    function testIsReporter() public {
        assertTrue(orally.isReporter(reporter), "The reporter should be authorized.");
    }

    function testAddReporter() public {
        address newReporter = vm.addr(0x1234);
        orally.addReporter(newReporter);
        assertTrue(orally.isReporter(newReporter), "The reporter should be authorized.");
    }

    function testRemoveReporter() public {
        orally.removeReporter(reporter);
        assertEq(orally.isReporter(reporter), false);
    }

    function testGetZeroUpdateFee() public {
        uint256 fee = orally.getUpdateFee(priceFeedData);
        assertEq(fee, 0);
    }

    function testGetNonZeroUpdateFee() public {
        uint256 fee = orally.getUpdateFee(priceFeedDataWithFee);
        assertEq(fee, 59688801444990);
    }

    function testVerifyPriceFeed() public {
        OrallyStructs.PriceFeed memory priceFeed = orally.verifyPriceFeed(priceFeedData);

        assertEq(priceFeed.pairId, "BTC/ETH");
        assertEq(priceFeed.price, 17879640968);
        assertEq(priceFeed.decimals, 9);
        assertEq(priceFeed.timestamp, 1716995580);
    }

    function testUpdatePriceFeed() public {
        orally.updatePriceFeed(priceFeedData);

        OrallyStructs.PriceFeed memory priceFeed = orally.getPriceFeed("BTC/ETH");

        assertEq(priceFeed.pairId, "BTC/ETH");
        assertEq(priceFeed.price, 17879640968);
        assertEq(priceFeed.decimals, 9);
        assertEq(priceFeed.timestamp, 1716995580);
    }

    function testVerifyPriceFeedWithFee() public {
        uint256 fee = orally.getUpdateFee(priceFeedDataWithFee);
        OrallyStructs.PriceFeed memory priceFeed = orally.verifyPriceFeedWithFee{ value: fee }(priceFeedDataWithFee);

        assertEq(priceFeed.pairId, "DOGE/SHIB");
        assertEq(priceFeed.price, 6045147689985);
        assertEq(priceFeed.decimals, 9);
        assertEq(priceFeed.timestamp, 1716995700);
    }

    function testUpdatePriceFeedWithFee() public {
        uint256 fee = orally.getUpdateFee(priceFeedDataWithFee);
        orally.updatePriceFeedWithFee{ value: fee }(priceFeedDataWithFee);

        OrallyStructs.PriceFeed memory priceFeed = orally.getPriceFeed("DOGE/SHIB");

        assertEq(priceFeed.pairId, "DOGE/SHIB");
        assertEq(priceFeed.price, 6045147689985);
        assertEq(priceFeed.decimals, 9);
        assertEq(priceFeed.timestamp, 1716995700);
    }

//    function testVerifyPriceFeedWithCache() public {
//        OrallyStructs.PriceFeed memory priceFeed = orally.verifyPriceFeedWithCache(priceFeedData);
//
//        assertEq(priceFeed.pairId, "DOGE/SHIB");
//        assertEq(priceFeed.price, 6267249999999);
//        assertEq(priceFeed.decimals, 9);
//        assertEq(priceFeed.timestamp, 1715768880);
//    }

//    function testVerifyCustomNumber() public {
//        OrallyStructs.CustomNumber memory numberFeed = orally.verifyCustomNumber(customNumberData);
//
//        assertEq(numberFeed.feedId, "custom_BTC/USD_NUMBER");
//        assertEq(numberFeed.value, 61854000000);
//        assertEq(numberFeed.decimals, 6);
//    }
//
//    function testVerifyCustomString() public {
//        OrallyStructs.CustomString memory stringFeed = orally.verifyCustomString(customStringData);
//
//        assertEq(stringFeed.feedId, "custom_get_logs_example");
//        assertEq(stringFeed.value, "ETH/USD");
//    }
//
//    function testVerifyProofOfFetchedBalanceFromArbitrum() public {
//        (bytes memory data, bytes memory metaData) = orally.verifyChainData(readArbitrumTokenBalanceData);
//
//        (uint256 balance) = abi.decode(data, (uint256));
//        (OrallyStructs.ReadContractMetadata memory meta) = abi.decode(metaData, (OrallyStructs.ReadContractMetadata));
//
//        console2.log("balance", balance);
//        console2.log("chain_id", meta.chain_id);
//        console2.log("contract_address", meta.contract_address);
//        console2.log("method", meta.method);
//        console2.log("params", meta.params);
//        console2.log("timestamp", meta.timestamp);
//
//        assertEq(balance, 16515555520224476981328);
//        assertEq(meta.chain_id, 42161);
//        assertEq(meta.contract_address, 0xA533f744B179F2431f5395978e391107DC76e103);
//        assertEq(meta.method, "balanceOf");
//        assertEq(meta.params, "(0x654DFF41D51c230FA400205A633101C5C1f1969C)");
//        assertEq(meta.timestamp, 1713954937);
//    }
//
//    function testVerifyProofOfFetchedTransferLogFromArbitrum() public {
//        (bytes memory dataBytes, bytes memory metaBytes) = orally.verifyChainData(arbitrumTransferLogData);
//
//        (OrallyStructs.ReadLogsData[] memory data) = abi.decode(dataBytes, (OrallyStructs.ReadLogsData[]));
//        (OrallyStructs.ReadLogsMetadata memory meta) = abi.decode(metaBytes, (OrallyStructs.ReadLogsMetadata));
//
//        (uint256 transferTokenAmount) = abi.decode(data[0].data, (uint256));
//
//        console2.log("chain_id", meta.chain_id);
//        console2.log("data.block_number", data[0].block_number);
//        console2.log("transferTokenAmount", transferTokenAmount);
//
//        assertEq(transferTokenAmount, 13275753247712809919);
//        assertEq(data[0].block_number, 204767826);
//        assertEq(meta.chain_id, 42161);
//    }
}
