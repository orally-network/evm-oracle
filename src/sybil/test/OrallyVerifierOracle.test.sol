// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.20;

import "forge-std/Test.sol";

import {OrallyVerifierOracleV2} from "../OrallyVerifierOracleV2.sol";
import {OrallyStructs} from "../../OrallyStructs.sol";

import {console2} from "@forge-std/console2.sol";

contract OrallyVerifierOracleTest is Test {
    // random deployer address for testing
    address constant deployer = 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38;

    // Sybil permissionless wallet (staging)
    address constant stagingReporter = 0xBFD54D868BE89184f19f597489A9FA9385AA708e;
    address constant prodReporter = 0x60825063CB0f4EF508854Ad4913f3a6de86B3807;

    /*
    source (staging): https://tysiw-qaaaa-aaaak-qcikq-cai.icp0.io/get_xrc_data_with_proof?id=BTC/ETH&api_key={api_key}(&bytes=true)
    decoded data: {
      "data": {
        "symbol": "UniswapV2Pool-0x517F9dD285e75b599234F7221227339478d0FcC8-DAI/MKR",
        "rate": 405452,
        "decimals": 9,
        "timestamp": 1718867939
      },
      "signature": "597d1b76724f5f52332d3b41dbe49f3729899402223881d8243b09dc0a50e3476c091243931b859278b0a5ca2b12200b2d7b3f339e2063ef0080378822c13fe01c"
    }
    */
    bytes constant priceFeedData = hex"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000062fcc0000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000006673d7e30000000000000000000000000000000000000000000000000000000000000040556e69737761705632506f6f6c2d3078353137463964443238356537356235393932333446373232313232373333393437386430466343382d4441492f4d4b520000000000000000000000000000000000000000000000000000000000000041597d1b76724f5f52332d3b41dbe49f3729899402223881d8243b09dc0a50e3476c091243931b859278b0a5ca2b12200b2d7b3f339e2063ef0080378822c13fe01c00000000000000000000000000000000000000000000000000000000000000";

    /*
    source (staging): https://tysiw-qaaaa-aaaak-qcikq-cai.icp0.io/get_feed_data_with_proof?id=custom_BTC/USD_NUMBER&api_key={api_key}(&bytes=true)
    decoded data: {
      "data": {
        "CustomNumber": {
          "id": "custom_BTC/USD_NUMBER",
          "value": 68331610000,
          "decimals": 6
        }
      },
      "meta": {
        "id": "custom_BTC/USD_NUMBER",
        "timestamp": 1717082781,
        "fee": "0",
        "fee_symbol": "ETH"
      },
      "signature": "de40822a3139453ffc581acef83ef712674a7ea7d8f49b1da65c8bae8489b34862b840d09a6d75492234e651148462441d7298d5669a5f03d040fc78a5964a381b"
    }
    */
    bytes constant customNumberData = hex"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000fe8e19f9000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000015637573746f6d5f4254432f5553445f4e554d424552000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000066589a9d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015637573746f6d5f4254432f5553445f4e554d42455200000000000000000000000000000000000000000000000000000000000000000000000000000000000041de40822a3139453ffc581acef83ef712674a7ea7d8f49b1da65c8bae8489b34862b840d09a6d75492234e651148462441d7298d5669a5f03d040fc78a5964a381b00000000000000000000000000000000000000000000000000000000000000";

    /*
    source (staging): https://tysiw-qaaaa-aaaak-qcikq-cai.icp0.io/read_contract_with_proof?chain_id=42161&function_signature="function balanceOf(address account) external view returns (uint256)"&contract_addr=0xA533f744B179F2431f5395978e391107DC76e103&method=balanceOf&params=(0x654DFF41D51c230FA400205A633101C5C1f1969C)&api_key={api_key}(&bytes=true)
    {
      "data": [
        {
          "Uint": "16515555520224476981328"
        }
      ],
      "meta": {
        "chain_id": 42161,
        "contract_address": "0xA533f744B179F2431f5395978e391107DC76e103",
        "method": "balanceOf",
        "params": "(0x654DFF41D51c230FA400205A633101C5C1f1969C)",
        "block_number": 0,
        "timestamp": 1717147785,
        "fee": "0",
        "fee_symbol": "ETH"
      },
      "signature": "64b7e9f10055cc6d2194b0e2400e35af62f4c3b12326fbeb6fd2bb0aeb8b6857337eca6775223b8a0ef14d356780a7c2bc7a37d6cccb853781f11c33e86aaefb1c"
    }
    */
    bytes constant readArbitrumTokenBalanceData = hex"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000037f4f60027b15aae85000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000a4b1000000000000000000000000a533f744b179f2431f5395978e391107dc76e1030000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066599889000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000962616c616e63654f660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c283078363534444646343144353163323330464134303032303541363333313031433543316631393639432900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000411b35f15c4ee2809a8f9445d4b9014458943a39c2fb3702bafa556f533977dd1061363c08d3826e750e8576b617a7025cb3907f9e89a42d92fda48ee0104a6cbe1b00000000000000000000000000000000000000000000000000000000000000";

    /*
    source (staging): https://tysiw-qaaaa-aaaak-qcikq-cai.icp0.io/read_logs?chain_id=42161&block_from=204767825&block_to=204767827&topics0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&addresses=0xa533f744b179f2431f5395978e391107dc76e103&api_key={api_key}(&bytes=true)
    {
      "data": [
        {
          "address": "0xa533f744b179f2431f5395978e391107dc76e103",
          "topics": [
            "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
            "0x0000000000000000000000003166c6d2313fbcf1a40545c55662861f3320f343",
            "0x000000000000000000000000c08ffbba8c5f42beb7e6dd29142cc61855a3076b"
          ],
          "data": [...],
          "block_hash": "0x8c429bb034cc9ecf168cf988bb28c6afeef40cf33fa197f3cfcdcf1fe7548212",
          "block_number": 204767826,
          "transaction_hash": "0x2793384567fb135228beaf2fa6c9e88ab21f3ff928d1f7cdb495ed49e5112ac6",
          "transaction_index": 2,
          "log_index": "4",
          "transaction_log_index": "",
          "log_type": "",
          "removed": false
        }
      ],
      "meta": {
        "chain_id": 42161,
        "block_from": 204767825,
        "block_to": 204767827,
        "topics0": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        ],
        "topics1": [

        ],
        "topics2": [

        ],
        "topics3": [

        ],
        "addresses": [
          "0xa533f744b179f2431f5395978e391107dc76e103"
        ],
        "timestamp": 1717148628,
        "fee": "0",
        "fee_symbol": "ETH"
      },
      "signature": "946aaf16f48db50afdf668067e5ece06c79190bc0dffa34586cb292afb4faf7b189a23f72259f8de7d2fb7a09b7f06eac674ca86f2991c97c67b65097583d7671c"
    }
    */
    bytes constant arbitrumTransferLogData = hex"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000005e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000c348252000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000054000000000000000000000000000000000000000000000000000000000000005600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a307861353333663734346231373966323433316635333935393738653339313130376463373665313033000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000eb83cf33da7a913bfa4b1000000000000000000000000000000000000000000000000000000000c348251000000000000000000000000000000000000000000000000000000000c348253000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000066599bda307861353333663734346231373966323433316635333935393738653339313130376463373665313033000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000416cd24312b4b136cfa1bc066e5724c6fabf4c1102bafe883a5eedfc3cac2ef3ad38f537efb1d2eb9889cc442e61952cc1851ca6eee5042d3718bc7ffa264a3afb1c00000000000000000000000000000000000000000000000000000000000000";

    OrallyVerifierOracleV2 orally;
    // test privateKey
    uint256 reporterKey = 0xa11ce;
    address reporter;

    function setUp() public {
        reporter = vm.addr(reporterKey);

        console2.log("Reporter address: {}", reporter);

        vm.startPrank(deployer);
        orally = new OrallyVerifierOracleV2();
        orally.initialize(msg.sender);
        orally.addReporter(reporter);
        orally.addReporter(stagingReporter);
        orally.addReporter(prodReporter);
    }

    function testIsReporter() public view {
        assertTrue(orally.isReporter(reporter), "The reporter should be authorized.");
    }

    function testAddReporter() public {
        address newReporter = vm.addr(0x1234);
        orally.addReporter(newReporter);
        assertTrue(orally.isReporter(newReporter), "The reporter should be authorized.");
    }

    function testRemoveReporter() public {
        orally.removeReporter(reporter);
        assertEq(orally.isReporter(reporter), false);
    }

    function testVerifyPriceFeed() public view {
        OrallyStructs.PriceFeed memory priceFeed = orally.verifyPriceFeed(priceFeedData);

        assertEq(priceFeed.pairId, "UniswapV2Pool-0x517F9dD285e75b599234F7221227339478d0FcC8-DAI/MKR");
        assertEq(priceFeed.price, 405452);
        assertEq(priceFeed.decimals, 9);
        assertEq(priceFeed.timestamp, 1718867939);
    }

    function testUpdatePriceFeed() public {
        orally.updatePriceFeed(priceFeedData);

        OrallyStructs.PriceFeed memory priceFeed = orally.getPriceFeed("UniswapV2Pool-0x517F9dD285e75b599234F7221227339478d0FcC8-DAI/MKR");

        assertEq(priceFeed.pairId, "BTC/ETH");
        assertEq(priceFeed.price, 405452);
        assertEq(priceFeed.decimals, 9);
        assertEq(priceFeed.timestamp, 1718867939);
    }

    function testVerifyCustomNumber() public view {
        OrallyStructs.CustomNumber memory numberFeed = orally.verifyCustomNumber(customNumberData);

        assertEq(numberFeed.feedId, "custom_BTC/USD_NUMBER");
        assertEq(numberFeed.value, 68331610000);
        assertEq(numberFeed.decimals, 6);
    }

    function testUpdateCustomNumber() public {
        orally.updateCustomNumber(customNumberData);

        OrallyStructs.CustomNumber memory numberFeed = orally.getCustomNumber("custom_BTC/USD_NUMBER");

        assertEq(numberFeed.feedId, "custom_BTC/USD_NUMBER");
        assertEq(numberFeed.value, 68331610000);
        assertEq(numberFeed.decimals, 6);
    }

    function testVerifyProofOfFetchedBalanceFromArbitrum() public view {
        (bytes memory data, bytes memory metaData) = orally.verifyReadContractData(readArbitrumTokenBalanceData);

        (uint256 balance) = abi.decode(data, (uint256));
        (OrallyStructs.ReadContractMetadata memory meta) = abi.decode(metaData, (OrallyStructs.ReadContractMetadata));

        console2.log("balance", balance);
        console2.log("chain_id", meta.chain_id);
        console2.log("contract_address", meta.contract_address);
        console2.log("method", meta.method);
        console2.log("params", meta.params);
        console2.log("timestamp", meta.timestamp);
        console2.log("block_number", meta.block_number);
        console2.log("fee", meta.fee);
        console2.log("fee_symbol", meta.fee_symbol);

        assertEq(balance, 16515555520224476981328);
        assertEq(meta.chain_id, 42161);
        assertEq(meta.contract_address, 0xA533f744B179F2431f5395978e391107DC76e103);
        assertEq(meta.method, "balanceOf");
        assertEq(meta.params, "(0x654DFF41D51c230FA400205A633101C5C1f1969C)");
        assertEq(meta.timestamp, 1717147785);
        assertEq(meta.block_number, 0);
        assertEq(meta.fee, 0);
        assertEq(meta.fee_symbol, "ETH");
    }

    function testVerifyProofOfFetchedTransferLogFromArbitrum() public view {
        (bytes memory dataBytes, bytes memory metaBytes) = orally.verifyReadLogsData(arbitrumTransferLogData);

        (OrallyStructs.ReadLogsData[] memory data) = abi.decode(dataBytes, (OrallyStructs.ReadLogsData[]));
        (OrallyStructs.ReadLogsMetadata memory meta) = abi.decode(metaBytes, (OrallyStructs.ReadLogsMetadata));

        (uint256 transferTokenAmount) = abi.decode(data[0].data, (uint256));

        console2.log("chain_id", meta.chain_id);
        console2.log("data.block_number", data[0].block_number);
        console2.log("transferTokenAmount", transferTokenAmount);

        assertEq(transferTokenAmount, 13275753247712809919);
        assertEq(data[0].block_number, 204767826);
        assertEq(meta.chain_id, 42161);
        assertEq(meta.fee, 0);
        assertEq(meta.fee_symbol, "ETH");
    }
}
